From 61b16c811b4d43c61881bf530198633d00775d5f Mon Sep 17 00:00:00 2001
From: Mooneer Salem <mooneer@gmail.com>
Date: Fri, 22 Oct 2021 21:31:37 -0700
Subject: [PATCH 25/53] Reduce the number of required FP multiplications in
 hs_pitch_refinement() and mbest_search().

---
 src/mbest.c   | 36 ++++++++++++++++++++++++++++++++++++
 src/mbest.h   |  1 +
 src/newamp1.c | 10 +++-------
 src/sine.c    |  6 +++++-
 4 files changed, 45 insertions(+), 8 deletions(-)

diff --git a/src/mbest.c b/src/mbest.c
index 46d890de..5d0d9a0a 100644
--- a/src/mbest.c
+++ b/src/mbest.c
@@ -140,6 +140,42 @@ void mbest_search(
    }
 }
 
+/*---------------------------------------------------------------------------*\
+
+  mbest_search_equalweight
+
+  Searches vec[] to a codebbook of vectors, and maintains a list of the mbest
+  closest matches. Similar to mbest_search() but with w[] = 1.
+
+\*---------------------------------------------------------------------------*/
+
+void mbest_search_equalweight(
+		  const float  *cb,     /* VQ codebook to search         */
+		  float         vec[],  /* target vector                 */
+		  int           k,      /* dimension of vector           */
+		  int           m,      /* number on entries in codebook */
+		  struct MBEST *mbest,  /* list of closest matches       */
+		  int           index[] /* indexes that lead us here     */
+)
+{
+   float   e;
+   
+   for(int j = 0; j < m; j++) {
+        int i;
+
+        e = 0.0;
+        for(int i = 0; i < k; i++) {
+            float diff = (*cb++) - vec[i];
+            float diff2 = diff * diff;
+            e += diff2;
+        }
+
+        index[0] = j;
+        if (e < mbest->list[mbest->entries - 1].error)
+            mbest_insert(mbest, index, e);
+   }
+}
+
 
 /*---------------------------------------------------------------------------*\
 
diff --git a/src/mbest.h b/src/mbest.h
index 43c322f3..7565a3f3 100644
--- a/src/mbest.h
+++ b/src/mbest.h
@@ -46,6 +46,7 @@ struct MBEST *mbest_create(int entries);
 void mbest_destroy(struct MBEST *mbest);
 void mbest_insert(struct MBEST *mbest, int index[], float error);
 void mbest_search(const float  *cb, float vec[], float w[], int k, int m, struct MBEST *mbest, int index[]);
+void mbest_search_equalweight(const float  *cb, float vec[], int k, int m, struct MBEST *mbest, int index[]);
 void mbest_search450(const float  *cb, float vec[], float w[], int k,int shorterK, int m, struct MBEST *mbest, int index[]);
 
 void mbest_print(char title[], struct MBEST *mbest);
diff --git a/src/newamp1.c b/src/newamp1.c
index e22c224c..006f84fd 100644
--- a/src/newamp1.c
+++ b/src/newamp1.c
@@ -166,7 +166,6 @@ float rate_K_mbest_encode(int *indexes, float *x, float *xq, int ndim, int mbest
   const float *codebook2 = newamp1vq_cb[1].cb;
   struct MBEST *mbest_stage1, *mbest_stage2;
   float target[ndim];
-  float w[ndim];
   int   index[MBEST_STAGES];
   float mse, tmp;
 
@@ -174,10 +173,7 @@ float rate_K_mbest_encode(int *indexes, float *x, float *xq, int ndim, int mbest
 
   assert(ndim == newamp1vq_cb[0].k);
 
-  /* equal weights, could be argued mel freq axis gives freq dep weighting */
-
-  for(i=0; i<ndim; i++)
-      w[i] = 1.0;
+  /* note: using equal weights, could be argued mel freq axis gives freq dep weighting */
 
   mbest_stage1 = mbest_create(mbest_entries);
   mbest_stage2 = mbest_create(mbest_entries);
@@ -186,7 +182,7 @@ float rate_K_mbest_encode(int *indexes, float *x, float *xq, int ndim, int mbest
 
   /* Stage 1 */
 
-  mbest_search(codebook1, x, w, ndim, newamp1vq_cb[0].m, mbest_stage1, index);
+  mbest_search_equalweight(codebook1, x, ndim, newamp1vq_cb[0].m, mbest_stage1, index);
 
   /* Stage 2 */
 
@@ -194,7 +190,7 @@ float rate_K_mbest_encode(int *indexes, float *x, float *xq, int ndim, int mbest
       index[1] = n1 = mbest_stage1->list[j].index[0];
       for(i=0; i<ndim; i++)
 	  target[i] = x[i] - codebook1[ndim*n1+i];
-      mbest_search(codebook2, target, w, ndim, newamp1vq_cb[1].m, mbest_stage2, index);
+      mbest_search_equalweight(codebook2, target, ndim, newamp1vq_cb[1].m, mbest_stage2, index);
   }
 
   n1 = mbest_stage2->list[0].index[1];
diff --git a/src/sine.c b/src/sine.c
index 750e2628..8fbd5506 100644
--- a/src/sine.c
+++ b/src/sine.c
@@ -372,11 +372,15 @@ void hs_pitch_refinement(MODEL *model, COMP Sw[], float pmin, float pmax, float
   for(p=pmin; p<=pmax; p+=pstep) {
     E = 0.0;
     Wo = TWO_PI/p;
+    
+    float bFloat = Wo * one_on_r;
+    float currentBFloat = bFloat;
 
     /* Sum harmonic magnitudes */
     for(m=1; m<=model->L; m++) {
-        b = (int)(m*Wo*one_on_r + 0.5);
+        b = (int)(currentBFloat + 0.5);
         E += Sw[b].real*Sw[b].real + Sw[b].imag*Sw[b].imag;
+        currentBFloat += bFloat;
     }
     /* Compare to see if this is a maximum */
 
-- 
2.30.2

