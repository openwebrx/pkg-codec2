From 8cb05b18e72719886b82b6c5dbc50105746597fe Mon Sep 17 00:00:00 2001
From: Mooneer Salem <mooneer@gmail.com>
Date: Sun, 10 Oct 2021 03:18:10 -0700
Subject: [PATCH 13/53] Experiment: improve perforamance of the BPF on ARM by
 using CMSIS.

---
 src/filter.c | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

diff --git a/src/filter.c b/src/filter.c
index ccb58cde..3ff48a1c 100644
--- a/src/filter.c
+++ b/src/filter.c
@@ -254,6 +254,26 @@ void quisk_cfTune(struct quisk_cfFilter * filter, float freq) {
 \*---------------------------------------------------------------------------*/
 
 void quisk_ccfFilter(complex float * inSamples, complex float * outSamples, int count, struct quisk_cfFilter * filter) {
+#if defined(FDV_ARM_MATH)
+    complex float ptSample[filter->nTaps + count];
+    complex float *ptSamplePtr = &ptSample[0];
+    complex float ptCoeff[filter->nTaps];
+    memset(&ptSample, 0, (filter->nTaps) * sizeof(complex float));
+    memcpy(&ptSample[filter->nTaps], inSamples, count);
+
+    // Reverse coefficients since we're going to go forwards over samples.
+    for (int i = 0, k = filter->nTaps - 1; i < filter->nTaps; i++, k--)
+    {
+        ptCoeff[i] = filter->cpxCoefs[k];
+    }
+
+    for (int i = 0; i < count; i++, ptSamplePtr++)
+    {
+        complex float accum = 0;
+        arm_cmplx_dot_prod_f32(ptSamplePtr, &ptCoeff, filter->nTaps, (float32_t*)&accum, (float32_t)&accum + 1);
+        outSamples[i] = accum;
+    }
+#else
     int i, k;
     complex float * ptSample;
     complex float * ptCoef;
@@ -277,5 +297,6 @@ void quisk_ccfFilter(complex float * inSamples, complex float * outSamples, int
         if (++filter->ptcSamp >= filter->cSamples + filter->nTaps)
             filter->ptcSamp = filter->cSamples;
     }
+#endif
 }
 
-- 
2.30.2

