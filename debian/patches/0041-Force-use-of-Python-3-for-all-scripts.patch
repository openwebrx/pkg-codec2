From 1d06739e65c73911f497b9ccde97edab7af2cf42 Mon Sep 17 00:00:00 2001
From: Mooneer Salem <mooneer@gmail.com>
Date: Fri, 5 Nov 2021 23:56:12 -0700
Subject: [PATCH 41/53] Force use of Python 3 for all scripts.

---
 octave/fsk_demod_BER_test.py               |  2 +-
 octave/fskdemodgui.py                      |  2 +-
 octave/plot_fsk_demod_stats.py             |  2 +-
 stm32/support/hex2dfu.py                   |  2 +-
 stm32/support/intelhex/bench.py            |  2 +-
 stm32/support/intelhex/test.py             |  2 +-
 stm32/unittest/scripts/tst_api_demod_check | 18 +++++++++---------
 unittest/ofdm_fade.sh                      |  2 +-
 unittest/ofdm_fade_dpsk.sh                 |  2 +-
 unittest/ofdm_phase_est_bw.sh              |  2 +-
 unittest/test_700c_eq.sh                   |  2 +-
 11 files changed, 19 insertions(+), 19 deletions(-)
 mode change 100644 => 100755 octave/fsk_demod_BER_test.py

diff --git a/octave/fsk_demod_BER_test.py b/octave/fsk_demod_BER_test.py
old mode 100644
new mode 100755
index f770e4ff..49f14d38
--- a/octave/fsk_demod_BER_test.py
+++ b/octave/fsk_demod_BER_test.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 #
 #   Perform automated Eb/N0 testing of the C-implementation of fsk_mod / fsk_demod
 #
diff --git a/octave/fskdemodgui.py b/octave/fskdemodgui.py
index 139cfa20..f1a4f296 100644
--- a/octave/fskdemodgui.py
+++ b/octave/fskdemodgui.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 #
 #	fsk_demod Statistics GUI
 #	Accepts the stats output from fsk_demod on stdin, and plots it.
diff --git a/octave/plot_fsk_demod_stats.py b/octave/plot_fsk_demod_stats.py
index a73287de..b2fbedc4 100644
--- a/octave/plot_fsk_demod_stats.py
+++ b/octave/plot_fsk_demod_stats.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 #
 #   Plot fsk_demod statistic outputs.
 #
diff --git a/stm32/support/hex2dfu.py b/stm32/support/hex2dfu.py
index 30b3f174..c6c13f57 100755
--- a/stm32/support/hex2dfu.py
+++ b/stm32/support/hex2dfu.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python2
+#!/usr/bin/env python3
 #
 # Intel HEX to ST microelectronics DfuSe file converter
 # Copyright (C)2015 Thomas Kindler <mail@t-kindler.de>
diff --git a/stm32/support/intelhex/bench.py b/stm32/support/intelhex/bench.py
index 0d8ed3e3..9195a640 100644
--- a/stm32/support/intelhex/bench.py
+++ b/stm32/support/intelhex/bench.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 # (c) Alexander Belchenko, 2007, 2009
 
 """Benchmarking.
diff --git a/stm32/support/intelhex/test.py b/stm32/support/intelhex/test.py
index 9e4901cf..e34e09ba 100644
--- a/stm32/support/intelhex/test.py
+++ b/stm32/support/intelhex/test.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 # Copyright (c) 2005-2013, Alexander Belchenko
 # All rights reserved.
diff --git a/stm32/unittest/scripts/tst_api_demod_check b/stm32/unittest/scripts/tst_api_demod_check
index 5f3ca006..d5de8cb2 100755
--- a/stm32/unittest/scripts/tst_api_demod_check
+++ b/stm32/unittest/scripts/tst_api_demod_check
@@ -22,11 +22,11 @@ cd "${RUN_DIR}"
 # way of performing a rough comparsion of two output speech files that are not exactly the same
 
 function compare_energy() {
-    energy_ref=$(python -c "import numpy as np; x=np.fromfile(\"ref_demod.raw\",dtype=\"int16\").astype(float); print(10*np.log10(np.dot(x,x)))")
-    energy_target=$(python -c "import numpy as np; x=np.fromfile(\"stm_out.raw\",dtype=\"int16\").astype(float); print(10*np.log10(np.dot(x,x)))")
+    energy_ref=$(python3 -c "import numpy as np; x=np.fromfile(\"ref_demod.raw\",dtype=\"int16\").astype(float); print(10*np.log10(np.dot(x,x)))")
+    energy_target=$(python3 -c "import numpy as np; x=np.fromfile(\"stm_out.raw\",dtype=\"int16\").astype(float); print(10*np.log10(np.dot(x,x)))")
     printf "ref energy: %f target energy: %f\n" $energy_ref $energy_target
 	
-    python -c "import sys; sys.exit(1) if abs($energy_ref-$energy_target) < 1 else sys.exit(0)"
+    python3 -c "import sys; sys.exit(1) if abs($energy_ref-$energy_target) < 1 else sys.exit(0)"
     if [[ $? -eq 1 ]]; then echo "energy compare OK"; 
     else echo "energy compare BAD"; 
      	 let Fails=($Fails + 1)
@@ -68,7 +68,7 @@ case "${TEST_OPT}" in
 	# for such a short test, so we'll just sanity check the
 	# reference uncoded BER here. Bash can't compare floats
 	# .... so use return code of some python script
-	python -c "import sys; sys.exit(1) if $uber_ref < 0.1 else sys.exit(0)"
+	python3 -c "import sys; sys.exit(1) if $uber_ref < 0.1 else sys.exit(0)"
 	if [[ $? -eq 1 ]]; then echo "OK"; 
 	else echo "BAD"; 
      	    let Fails=($Fails + 1)
@@ -78,7 +78,7 @@ case "${TEST_OPT}" in
 	uber_target=$(cat stderr.log | sed -n "s/^BER.*: \([0-9..]*\).*Tbits.*/\1/p")
 	cber_target=$(cat stderr.log | sed -n "s/^Coded BER.*: \([0-9..]*\).*Tbits.*/\1/p")
 	printf "TARGET uncoded BER: %f coded BER: %f\n" $uber_target $cber_target
-	python -c "import sys; sys.exit(1) if $uber_target < 0.1 and abs($cber_ref-$cber_target) < 0.01 else sys.exit(0)"
+	python3 -c "import sys; sys.exit(1) if $uber_target < 0.1 and abs($cber_ref-$cber_target) < 0.01 else sys.exit(0)"
 	if [[ $? -eq 1 ]]; then echo "OK"; 
 	else echo "BAD"; 
      	    let Fails=($Fails + 1)
@@ -109,7 +109,7 @@ case "${TEST_OPT}" in
 	# make sure execution time stays within bounds
 	execution_time=mktmp
 	cat stdout.log | sed  -n "s/.*freedv_rx \([0-9..]*\) msecs/\1/p" > $execution_time
-	python -c "import sys; import numpy as np;  x=np.loadtxt(\"$execution_time\"); print(\"execution time max:: %5.2f mean: %5.2f ms\" % (np.max(x), np.mean(x))); sys.exit(1) if np.max(x) < 80.0 else sys.exit(0)"
+	python3 -c "import sys; import numpy as np;  x=np.loadtxt(\"$execution_time\"); print(\"execution time max:: %5.2f mean: %5.2f ms\" % (np.max(x), np.mean(x))); sys.exit(1) if np.max(x) < 80.0 else sys.exit(0)"
 	if [[ $? -eq 1 ]]; then echo "execution time OK"; 
         else echo "BAD"; 
      	   let Fails=($Fails + 1)
@@ -145,7 +145,7 @@ case "${TEST_OPT}" in
 	# for such a short test, so we'll just sanity check the
 	# reference uncoded BER here. Bash can't compare floats
 	# .... so use return code of some python script
-	python -c "import sys; sys.exit(1) if $uber_ref < 0.1 else sys.exit(0)"
+	python3 -c "import sys; sys.exit(1) if $uber_ref < 0.1 else sys.exit(0)"
 	if [[ $? -eq 1 ]]; then echo "OK"; 
 	else echo "BAD"; 
      	    let Fails=($Fails + 1)
@@ -155,7 +155,7 @@ case "${TEST_OPT}" in
 	uber_target=$(cat stderr.log | sed -n "s/^BER.*: \([0-9..]*\).*Tbits.*/\1/p")
 	cber_target=$(cat stderr.log | sed -n "s/^Coded BER.*: \([0-9..]*\).*Tbits.*/\1/p")
 	printf "TARGET uncoded BER: %f coded BER: %f\n" $uber_target $cber_target
-	python -c "import sys; sys.exit(1) if $uber_target < 0.1 and abs($cber_ref-$cber_target) < 0.01 else sys.exit(0)"
+	python3 -c "import sys; sys.exit(1) if $uber_target < 0.1 and abs($cber_ref-$cber_target) < 0.01 else sys.exit(0)"
 	if [[ $? -eq 1 ]]; then echo "OK"; 
 	else echo "BAD"; 
      	    let Fails=($Fails + 1)
@@ -186,7 +186,7 @@ case "${TEST_OPT}" in
 	# make sure execution time stays within bounds
 	execution_time=mktmp
 	cat stdout.log | sed  -n "s/.*freedv_rx \([0-9..]*\) msecs/\1/p" > $execution_time
-	python -c "import sys; import numpy as np;  x=np.loadtxt(\"$execution_time\"); print(\"execution time max:: %5.2f mean: %5.2f ms\" % (np.max(x), np.mean(x))); sys.exit(1) if np.max(x) < 80.0 else sys.exit(0)"
+	python3 -c "import sys; import numpy as np;  x=np.loadtxt(\"$execution_time\"); print(\"execution time max:: %5.2f mean: %5.2f ms\" % (np.max(x), np.mean(x))); sys.exit(1) if np.max(x) < 80.0 else sys.exit(0)"
 	if [[ $? -eq 1 ]]; then echo "execution time OK"; 
         else echo "BAD"; 
      	   let Fails=($Fails + 1)
diff --git a/unittest/ofdm_fade.sh b/unittest/ofdm_fade.sh
index 896ec972..89eb33c3 100755
--- a/unittest/ofdm_fade.sh
+++ b/unittest/ofdm_fade.sh
@@ -18,4 +18,4 @@ pwd
 ofdm_mod --in /dev/zero --ldpc 1 --testframes 60 --txbpf | cohpsk_ch - - -24 --Fs 8000 -f -10 --mpp --raw_dir ../raw | ofdm_demod --out /dev/null --testframes --verbose 2 --ldpc 1 2> $results
 cat $results
 cber=$(cat $results | sed -n "s/^Coded BER.* \([0-9..]*\) Tbits.*/\1/p")
-python -c "import sys; sys.exit(0) if $cber<=0.05 else sys.exit(1)"
+python3 -c "import sys; sys.exit(0) if $cber<=0.05 else sys.exit(1)"
diff --git a/unittest/ofdm_fade_dpsk.sh b/unittest/ofdm_fade_dpsk.sh
index 72a28984..749828ef 100755
--- a/unittest/ofdm_fade_dpsk.sh
+++ b/unittest/ofdm_fade_dpsk.sh
@@ -22,4 +22,4 @@ cohpsk_ch - - -40 --Fs 8000 -f 10 --ssbfilt 1 --mpd --raw_dir $RAW --multipath_d
 ofdm_demod --out /dev/null --testframes --mode 2020 --verbose 1 --ldpc -p 312 --dpsk 2> $results
 cat $results
 cber=$(cat $results | sed -n "s/^Coded BER.* \([0-9..]*\) Tbits.*/\1/p")
-python -c "import sys; sys.exit(0) if $cber<=0.05 else sys.exit(1)"
+python3 -c "import sys; sys.exit(0) if $cber<=0.05 else sys.exit(1)"
diff --git a/unittest/ofdm_phase_est_bw.sh b/unittest/ofdm_phase_est_bw.sh
index ccb53344..028eda9b 100755
--- a/unittest/ofdm_phase_est_bw.sh
+++ b/unittest/ofdm_phase_est_bw.sh
@@ -30,4 +30,4 @@ cohpsk_ch - - -40 --Fs 8000 -f 10 --ssbfilt 1 --mpp --raw_dir ../raw | \
 ofdm_demod --out /dev/null --testframes --mode 2020 --verbose 2 --ldpc -p 312 --bandwidth 1 2> $results
 cat $results
 cber=$(cat $results | sed -n "s/^Coded BER.* \([0-9..]*\) Tbits.*/\1/p")
-python -c "import sys; sys.exit(0) if $cber<=0.05 else sys.exit(1)"
+python3 -c "import sys; sys.exit(0) if $cber<=0.05 else sys.exit(1)"
diff --git a/unittest/test_700c_eq.sh b/unittest/test_700c_eq.sh
index 58b250e4..058f27b8 100755
--- a/unittest/test_700c_eq.sh
+++ b/unittest/test_700c_eq.sh
@@ -9,4 +9,4 @@ var=$(cat $results | sed -n "s/.*var: \([0-9..]*\) .*/\1/p")
 c2enc 700C ../raw/kristoff.raw /dev/null --var --eq 2> $results
 var_eq=$(cat $results | sed -n "s/.*var: \([0-9..]*\) .*/\1/p")
 printf "var: %5.2f var_eq: %5.2f\n" $var $var_eq
-python -c "import sys; sys.exit(0) if $var_eq<=$var else sys.exit(1)"
+python3 -c "import sys; sys.exit(0) if $var_eq<=$var else sys.exit(1)"
-- 
2.30.2

